# action.yml
name: cosign-installer
author: sigstore
description: 'Installs cosign and includes it in your path'
branding:
  icon: 'package'
  color: 'blue'
# This is pinned to the last major release, we have to bump it for each action version.
inputs:
  cosign-release:
    description: 'cosign release version to be installed'
    required: false
    default: 'v2.5.3'
  install-dir:
    description: 'Where to install the cosign binary'
    required: false
    default: '$HOME/.cosign'
  use-sudo:
    description: 'set to true if install-dir location requires sudo privs'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    # We verify the version against a SHA **in the published action itself**, not in the GCS bucket.
    - shell: bash
      run: |
        #!/bin/bash
        # cosign install script
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        # Check for unsupported old versions (anything below v2.0.0)
        if [[ "${{ inputs.cosign-release }}" != "main" ]]; then
          # Extract version without 'v' prefix for comparison
          version_num="${{ inputs.cosign-release }}"
          version_num="${version_num#v}"

          # Check if version is less than v2.0.0
          if [[ "$version_num" =~ ^[01]\. ]] || [[ "$version_num" =~ ^0\. ]]; then
            log_error "cosign versions below v2.0.0 are no longer supported."
            log_error "Requested version: ${{ inputs.cosign-release }}"
            log_error "Please use cosign v2.4.0 or later."
            log_error "See https://github.com/sigstore/cosign/releases for available versions."
            exit 1
          fi
        fi

        mkdir -p ${{ inputs.install-dir }}

        if [[ ${{ inputs.cosign-release }} == "main" ]]; then
          log_info "installing cosign via 'go install' from its main version"
          GOBIN=$(go env GOPATH)/bin
          go install github.com/sigstore/cosign/v2/cmd/cosign@main
          ln -s $GOBIN/cosign ${{ inputs.install-dir}}/cosign
          exit 0
        fi

        shaprog() {
          case ${{ runner.os }} in
            Linux|linux)
              sha256sum $1 | cut -d' ' -f1
              ;;
            macOS|macos)
              shasum -a256 $1 | cut -d' ' -f1
              ;;
            Windows|windows)
              powershell -command "(Get-FileHash $1 -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()"
              ;;
            *)
              log_error "unsupported OS ${{ runner.os }}"
              exit 1
              ;;
          esac
        }

        bootstrap_version='v2.5.3'
        bootstrap_linux_amd64_sha='783b5d6c74105401c63946c68d9b2a4e1aab3c8abce043e06b8510b02b623ec9'
        bootstrap_linux_arm_sha='b0c64e0e736c2b50cf4a36e113ca98a638bc7e957678c39bab40b6feae9a543b'
        bootstrap_linux_arm64_sha='bffabe4cf183122b7de3111257a863c99e7dc6cf1093bfd7bf961de1795589b8'
        bootstrap_darwin_amd64_sha='172731b1c2575dd76069a87d4d17312fd027fe0947e45e4a9ba9b915877e0ed0'
        bootstrap_darwin_arm64_sha='86e0cad94d0da4c0dab5e26672ede71447a08a0f0d8495b9381c117df27d7d09'
        bootstrap_windows_amd64_sha='545d87e096cab55e213f25b6ec5c9a74c958f72d05182cee1cd53a4eb6c2e561'
        cosign_executable_name=cosign

        trap "popd >/dev/null" EXIT

        pushd ${{ inputs.install-dir }} > /dev/null

        case ${{ runner.os }} in
          Linux|linux)
            case ${{ runner.arch }} in
              X64|amd64)
                bootstrap_filename='cosign-linux-amd64'
                bootstrap_sha=${bootstrap_linux_amd64_sha}
                desired_cosign_filename='cosign-linux-amd64'
                ;;

              ARM|arm)
                bootstrap_filename='cosign-linux-arm'
                bootstrap_sha=${bootstrap_linux_arm_sha}
                desired_cosign_filename='cosign-linux-arm'
                ;;

              ARM64|arm64)
                bootstrap_filename='cosign-linux-arm64'
                bootstrap_sha=${bootstrap_linux_arm64_sha}
                desired_cosign_filename='cosign-linux-arm64'
                ;;

              *)
                log_error "unsupported architecture ${{ runner.arch }}"
                exit 1
                ;;
            esac
            ;;

          macOS|macos)
            case ${{ runner.arch }} in
              X64|amd64)
                bootstrap_filename='cosign-darwin-amd64'
                bootstrap_sha=${bootstrap_darwin_amd64_sha}
                desired_cosign_filename='cosign-darwin-amd64'
                ;;

              ARM64|arm64)
                bootstrap_filename='cosign-darwin-arm64'
                bootstrap_sha=${bootstrap_darwin_arm64_sha}
                desired_cosign_filename='cosign-darwin-arm64'
                ;;

              *)
                log_error "unsupported architecture ${{ runner.arch }}"
                exit 1
                ;;
            esac
            ;;

          Windows|windows)
            case ${{ runner.arch }} in
              X64|amd64)
                bootstrap_filename='cosign-windows-amd64.exe'
                bootstrap_sha=${bootstrap_windows_amd64_sha}
                desired_cosign_filename='cosign-windows-amd64.exe'
                cosign_executable_name=cosign.exe
                ;;
              *)
                log_error "unsupported architecture ${{ runner.arch }}"
                exit 1
                ;;
            esac
            ;;
          *)
            log_error "unsupported os ${{ runner.os }}"
            exit 1
            ;;
        esac

        SUDO=
        if [[ "${{ inputs.use-sudo }}" == "true" ]] && command -v sudo >/dev/null; then
          SUDO=sudo
        fi

        expected_bootstrap_version_digest=${bootstrap_sha}
        log_info "Downloading bootstrap version '${bootstrap_version}' of cosign to verify version to be installed...\n      https://github.com/sigstore/cosign/releases/download/${bootstrap_version}/${bootstrap_filename}"
        $SUDO curl -fsL https://github.com/sigstore/cosign/releases/download/${bootstrap_version}/${bootstrap_filename} -o ${cosign_executable_name}
        shaBootstrap=$(shaprog ${cosign_executable_name});
        if [[ $shaBootstrap != ${expected_bootstrap_version_digest} ]]; then
          log_error "Unable to validate cosign version: '${{ inputs.cosign-release }}'"
          exit 1
        fi
        $SUDO chmod +x ${cosign_executable_name}

        # If the bootstrap and specified `cosign` releases are the same, we're done.
        if [[ ${{ inputs.cosign-release }} == ${bootstrap_version} ]]; then
          log_info "bootstrap version successfully verified and matches requested version so nothing else to do"
          exit 0
        fi

        semver='^v([0-9]+\.){0,2}(\*|[0-9]+)(-?r?c?)(\.[0-9]+)$'
        if [[ ${{ inputs.cosign-release }} =~ $semver ]]; then
          log_info "Custom cosign version '${{ inputs.cosign-release }}' requested"
        else
          log_error "Unable to validate requested cosign version: '${{ inputs.cosign-release }}'"
          exit 1
        fi

        # Download custom cosign
        log_info "Downloading platform-specific version '${{ inputs.cosign-release }}' of cosign...\n      https://github.com/sigstore/cosign/releases/download/${{ inputs.cosign-release }}/${desired_cosign_filename}"
        $SUDO curl -fsL https://github.com/sigstore/cosign/releases/download/${{ inputs.cosign-release }}/${desired_cosign_filename} -o cosign_${{ inputs.cosign-release }}
        shaCustom=$(shaprog cosign_${{ inputs.cosign-release }});

        # same hash means it is the same release
        if [[ $shaCustom != $shaBootstrap ]]; then
          log_info "Downloading detached signature for platform-specific '${{ inputs.cosign-release }}' of cosign...\n      https://github.com/sigstore/cosign/releases/download/${{ inputs.cosign-release }}/${desired_cosign_filename}.sig"
          $SUDO curl -fsLO https://github.com/sigstore/cosign/releases/download/${{ inputs.cosign-release }}/${desired_cosign_filename}.sig

          log_info "Downloading cosign public key '${{ inputs.cosign-release }}' of cosign...\n    https://raw.githubusercontent.com/sigstore/cosign/${{ inputs.cosign-release }}/release/release-cosign.pub"
          RELEASE_COSIGN_PUB_KEY=https://raw.githubusercontent.com/sigstore/cosign/${{ inputs.cosign-release }}/release/release-cosign.pub
          RELEASE_COSIGN_PUB_KEY_SHA='f4cea466e5e887a45da5031757fa1d32655d83420639dc1758749b744179f126'

          log_info "Verifying public key matches expected value"
          $SUDO curl -fsL $RELEASE_COSIGN_PUB_KEY -o public.key
          sha_fetched_key=$(shaprog public.key)
          if [[ $sha_fetched_key != $RELEASE_COSIGN_PUB_KEY_SHA ]]; then
            log_error "Fetched public key does not match expected digest, exiting"
            exit 1
          fi

          log_info "Using bootstrap cosign to verify signature of desired cosign version"
          ./cosign verify-blob --key public.key --signature ${desired_cosign_filename}.sig cosign_${{ inputs.cosign-release }}

          $SUDO rm cosign
          $SUDO mv cosign_${{ inputs.cosign-release }} ${cosign_executable_name}
          $SUDO chmod +x ${cosign_executable_name}
          log_info "Installation complete!"
        fi
    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: echo "${{ inputs.install-dir }}" >> $GITHUB_PATH
      shell: bash
    - if: ${{ runner.os == 'Windows' }}
      run: echo "${{ inputs.install-dir }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
